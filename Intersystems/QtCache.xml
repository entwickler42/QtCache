<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Qt.CacheTool">
<Super>%RegisteredObject</Super>
<TimeCreated>63850,61720.151703</TimeCreated>

<Property name="LastStatus">
<Type>%Status</Type>
</Property>

<Property name="ErrorLog">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>initvalue</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    S ..LastStatus = $$$OK
    Q $$$OK
]]></Implementation>
</Method>

<Method name="LastStatusSet">
<FormalSpec>status:%Status</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    S i%LastStatus = status
    I $$$ISERR(..LastStatus) {
        S i%ErrorLog = $SYSTEM.Status.GetErrorText(..LastStatus)
    }ELSE{
        S i%ErrorLog = ""
    }
    
    Q $$$OK
]]></Implementation>
</Method>

<Method name="Filter">
<FormalSpec>filter:%String,object:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    I filter="" Q 1

    S RVAL=0    
    I $SYSTEM.Version.GetMajor() > 2008 {
        F I=1:1:$L(filter,";") {
            S RE = ##class(%Regex.Matcher).%New($P(filter,";",I))
            I RE.Match(object) S RVAL=1 Q
        }
    }ELSE{
        Q 1          

    }
    Q RVAL
]]></Implementation>
</Method>

<Method name="ListNamespaces">
<ReturnType>%Library.List</ReturnType>
<Implementation><![CDATA[
    S LS=""
    
    try{    
        S RS=##class(%ResultSet).%New("%SYS.Namespace:List")
        S SC=RS.Execute(0,0) 
        
        WHILE RS.%Next() { 
            S LS=LS_$LB(RS.Data("Nsp"))
        }
    }catch ex{
        S ..LastStatus = ex.AsStatus()
    }
    
    Q LS
]]></Implementation>
</Method>

<Method name="ListObjects">
<FormalSpec>uci:%String,filter:%String</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
    try{ 
        ZN uci                               
        
        S STREAM = ##class(%Stream.GlobalCharacter).%New()
                        
        // collect routine names
        S rs=##class(%ResultSet).%New()
        S rs.ClassName="%Library.Routine"
        S rs.QueryName="RoutineList"
        S sc=rs.Execute("*.int,*.mac,*.inc")        
        I $$$ISERR(sc) throw ##class(%Exception.StatusException).CreateFromStatus(sc)          
        while rs.%Next() {
            S NAME=rs.Data("Name")
            S ROUTINE=##class(%Library.Routine).%OpenId(NAME)               
            I ROUTINE.Generated=0,(..Filter(filter, NAME)) D STREAM.WriteLine(NAME)     
        }            
        
        // collect class names
        S LSC=""
        S QSPECC="/diffexport=1/unicode=1"
        D $SYSTEM.OBJ.GetClassList(.LSC, QSPECC)
        S I="" F  S I=$O(LSC(I)) Q:I=""  I ..Filter(filter, I_".cls") D STREAM.WriteLine(I_".cls")                   
        
        // collect global names
        S rs=##class(%ResultSet).%New()
        S rs.ClassName="%SYS.GlobalQuery"
        S rs.QueryName="NameSpaceList"
        S sc=rs.Execute($SYSTEM.SYS.NameSpace())            
        I $$$ISERR(sc) throw ##class(%Exception.StatusException).CreateFromStatus(sc)        
        while rs.%Next() {
            S NAME=rs.Data("Name")
            I ..Filter(filter, NAME_".gbl") D STREAM.WriteLine(NAME_".gbl")     
        }                
    }catch ex{
        S ..LastStatus = ex.AsStatus()
    }
    
    ZN "%SYS"
    
    Q STREAM
]]></Implementation>
</Method>

<Method name="ImportXML">
<FormalSpec>uci:%String,xml:%Stream.GlobalBinary,qspec:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    try{
        ZN uci
                                    
        S ..LastStatus = $SYSTEM.OBJ.LoadStream(xml, qspec)
    }catch ex{
        S ..LastStatus = ex.AsStatus()        
    }
        
    ZN "%SYS"
        
    Q ..LastStatus
]]></Implementation>
</Method>

<Method name="ExportXML">
<FormalSpec>uci:%String,object:%String</FormalSpec>
<ReturnType>%Stream.GlobalBinary</ReturnType>
<Implementation><![CDATA[
    
    S STREAM = $$$NULLOREF

    try{        
        ZN uci
        
        S ERRLOG=""
        S QSPECC="/diffexport=1"
        S STREAM=##class(%Stream.GlobalBinary).%New()
                
        D $SYSTEM.OBJ.ExportPatternToStream(object,.STREAM,QSPECC,.ERRLOG)          
        D STREAM.Rewind()     
    }catch ex{
        S ..LastStatus = ex.AsStatus()        
    }
    
    ZN "%SYS"
    Q STREAM
]]></Implementation>
</Method>

<Method name="CompileList">
<FormalSpec>uci:%String,objectNames:%String,qspec:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    try{
        ZN uci
        S errlog=""              
        S ..LastStatus = $SYSTEM.OBJ.CompileList(objectNames, qspec, .errlog)
    }catch ex{
        S ..LastStatus = ex.AsStatus()        
    }
        
    ZN "%SYS"
        
    Q ..LastStatus
]]></Implementation>
</Method>

<Method name="Execute">
<FormalSpec>uci:%String,code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    S SC=$$$OK
    
    TRY{
        ZN uci
        
        X code
    }CATCH EX{
        #dim ex as %Exception.AbstractException
        S SC=EX.AsStatus()
        S ..LastStatus = SC
    }
    
    ZN "%SYS"
    Q SC
]]></Implementation>
</Method>
</Class>


<Project name="QtCache" LastModified="2015-12-14 12:50:30.764043" TargetType="2" HttpServer="http://localhost:57772">
  <Items>
    <ProjectItem name="Qt.CacheTool" type="CLS"></ProjectItem>
  </Items>
</Project>
</Export>
