/****************************************************************************
**
** Namespace VISM generated by dumpcpp v5.5.1 using
** dumpcpp.exe -n VISM c:\Program Files (x86)\Common Files\InterSystems\Cache\VISM.ocx -o D:\src\QtCache\Intersystems\vismocx
** from the type library c:\Program Files (x86)\Common Files\InterSystems\Cache\VISM.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_VISMOCX_H
#define QAX_DUMPCPP_VISMOCX_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef VISM_EXPORT
#define VISM_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace VISM {


class VISM_EXPORT _DVisM
        : public QAxObject
{
public:
    _DVisM(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BatchMode

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int BatchMode() const; //Returns the value of BatchMode
    inline void SetBatchMode(int value); //Sets the value of the BatchMode property

    /*
    Property Code

    For more information, see help context 25 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString Code() const; //Returns the value of Code
    inline void SetCode(const QString& value); //Sets the value of the Code property

    /*
    Property ConnTag

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString ConnTag() const; //Returns the value of ConnTag
    inline void SetConnTag(const QString& value); //Sets the value of the ConnTag property

    /*
    Property ConnectionState

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int ConnectionState() const; //Returns the value of ConnectionState
    inline void SetConnectionState(int value); //Sets the value of the ConnectionState property

    /*
    Property ControlClasses

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString ControlClasses() const; //Returns the value of ControlClasses
    inline void SetControlClasses(const QString& value); //Sets the value of the ControlClasses property

    /*
    Property ElapsedTime

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int ElapsedTime() const; //Returns the value of ElapsedTime
    inline void SetElapsedTime(int value); //Sets the value of the ElapsedTime property

    /*
    Property Error

    For more information, see help context 12 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int Error() const; //Returns the value of Error
    inline void SetError(int value); //Sets the value of the Error property

    /*
    Property ErrorName

    For more information, see help context 13 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString ErrorName() const; //Returns the value of ErrorName
    inline void SetErrorName(const QString& value); //Sets the value of the ErrorName property

    /*
    Property ErrorTrap

    For more information, see help context 29 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline bool ErrorTrap() const; //Returns the value of ErrorTrap
    inline void SetErrorTrap(bool value); //Sets the value of the ErrorTrap property

    /*
    Property ExecFlag

    For more information, see help context 28 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int ExecFlag() const; //Returns the value of ExecFlag
    inline void SetExecFlag(int value); //Sets the value of the ExecFlag property

    /*
    Property Form

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString Form() const; //Returns the value of Form
    inline void SetForm(const QString& value); //Sets the value of the Form property

    /*
    Property FormName

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString FormName() const; //Returns the value of FormName
    inline void SetFormName(const QString& value); //Sets the value of the FormName property

    /*
    Property INTCode

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString INTCode() const; //Returns the value of INTCode
    inline void SetINTCode(const QString& value); //Sets the value of the INTCode property

    /*
    Property Interval

    For more information, see help context 11 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int Interval() const; //Returns the value of Interval
    inline void SetInterval(int value); //Sets the value of the Interval property

    /*
    Property KeepAliveInterval

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int KeepAliveInterval() const; //Returns the value of KeepAliveInterval
    inline void SetKeepAliveInterval(int value); //Sets the value of the KeepAliveInterval property

    /*
    Property KeepAliveTimeout

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int KeepAliveTimeout() const; //Returns the value of KeepAliveTimeout
    inline void SetKeepAliveTimeout(int value); //Sets the value of the KeepAliveTimeout property

    /*
    Property LoadOption

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int LoadOption() const; //Returns the value of LoadOption
    inline void SetLoadOption(int value); //Sets the value of the LoadOption property

    /*
    Property LogMask

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int LogMask() const; //Returns the value of LogMask
    inline void SetLogMask(int value); //Sets the value of the LogMask property

    /*
    Property MCode

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString MCode() const; //Returns the value of MCode
    inline void SetMCode(const QString& value); //Sets the value of the MCode property

    /*
    Property MServer

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString MServer() const; //Returns the value of MServer
    inline void SetMServer(const QString& value); //Sets the value of the MServer property

    /*
    Property MsgText

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString MsgText() const; //Returns the value of MsgText
    inline void SetMsgText(const QString& value); //Sets the value of the MsgText property

    /*
    Property NameSpace

    For more information, see help context 26 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString NameSpace() const; //Returns the value of NameSpace
    inline void SetNameSpace(const QString& value); //Sets the value of the NameSpace property

    /*
    Property P0

    For more information, see help context 14 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P0() const; //Returns the value of P0
    inline void SetP0(const QVariant& value); //Sets the value of the P0 property

    /*
    Property P1

    For more information, see help context 15 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P1() const; //Returns the value of P1
    inline void SetP1(const QVariant& value); //Sets the value of the P1 property

    /*
    Property P2

    For more information, see help context 16 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P2() const; //Returns the value of P2
    inline void SetP2(const QVariant& value); //Sets the value of the P2 property

    /*
    Property P3

    For more information, see help context 17 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P3() const; //Returns the value of P3
    inline void SetP3(const QVariant& value); //Sets the value of the P3 property

    /*
    Property P4

    For more information, see help context 18 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P4() const; //Returns the value of P4
    inline void SetP4(const QVariant& value); //Sets the value of the P4 property

    /*
    Property P5

    For more information, see help context 19 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P5() const; //Returns the value of P5
    inline void SetP5(const QVariant& value); //Sets the value of the P5 property

    /*
    Property P6

    For more information, see help context 20 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P6() const; //Returns the value of P6
    inline void SetP6(const QVariant& value); //Sets the value of the P6 property

    /*
    Property P7

    For more information, see help context 21 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P7() const; //Returns the value of P7
    inline void SetP7(const QVariant& value); //Sets the value of the P7 property

    /*
    Property P8

    For more information, see help context 22 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P8() const; //Returns the value of P8
    inline void SetP8(const QVariant& value); //Sets the value of the P8 property

    /*
    Property P9

    For more information, see help context 23 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P9() const; //Returns the value of P9
    inline void SetP9(const QVariant& value); //Sets the value of the P9 property

    /*
    Property PDELIM

    For more information, see help context 9 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant PDELIM() const; //Returns the value of PDELIM
    inline void SetPDELIM(const QVariant& value); //Sets the value of the PDELIM property

    /*
    Property PLIST

    For more information, see help context 10 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant PLIST() const; //Returns the value of PLIST
    inline void SetPLIST(const QVariant& value); //Sets the value of the PLIST property

    /*
    Property Prefix

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString Prefix() const; //Returns the value of Prefix
    inline void SetPrefix(const QString& value); //Sets the value of the Prefix property

    /*
    Property PromptInterval

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int PromptInterval() const; //Returns the value of PromptInterval
    inline void SetPromptInterval(int value); //Sets the value of the PromptInterval property

    /*
    Property RoutineName

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString RoutineName() const; //Returns the value of RoutineName
    inline void SetRoutineName(const QString& value); //Sets the value of the RoutineName property

    /*
    Property RoutineSource

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString RoutineSource() const; //Returns the value of RoutineSource
    inline void SetRoutineSource(const QString& value); //Sets the value of the RoutineSource property

    /*
    Property Server

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString Server() const; //Returns the value of Server
    inline void SetServer(const QString& value); //Sets the value of the Server property

    /*
    Property TimeOut

    For more information, see help context 27 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int TimeOut() const; //Returns the value of TimeOut
    inline void SetTimeOut(int value); //Sets the value of the TimeOut property

    /*
    Property VALUE

    For more information, see help context 24 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant VALUE() const; //Returns the value of VALUE
    inline void SetVALUE(const QVariant& value); //Sets the value of the VALUE property

    /*
    Property _VALUE

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant _VALUE() const; //Returns the value of _VALUE
    inline void set_VALUE(const QVariant& value); //Sets the value of the _VALUE property

    /*
    Method AboutBox

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline void AboutBox();

    /*
    Method Connect

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int Connect(const QString& ConnectionString);

    /*
    Method Connect

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int Connect(const QString& ConnectionString, const QVariant& Tag);

    /*
    Method DeleteConnection

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline void DeleteConnection();

    /*
    Method Execute

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline void Execute(const QString& Code);

    /*
    Method GetConnStr

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString GetConnStr(const QString& inConnStr);

    /*
    Method LoadGblFromFile

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline bool LoadGblFromFile(const QString& FileName);

    /*
    Method LoadRtnFromFile

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline bool LoadRtnFromFile(const QString& FileName, const QString& Format);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DVisMEvents

// Actual coclasses
class VISM_EXPORT VisM : public QAxWidget
{
public:
    VisM(QWidget *parent = 0, Qt::WindowFlags f = 0)
        : QAxWidget(parent, f)
    {
        setControl("{88f75483-0574-11d0-8085-0000c0bd354b}");
    }

    /*
    Property BatchMode

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int BatchMode() const; //Returns the value of BatchMode
    inline void SetBatchMode(int value); //Sets the value of the BatchMode property

    /*
    Property Code

    For more information, see help context 25 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString Code() const; //Returns the value of Code
    inline void SetCode(const QString& value); //Sets the value of the Code property

    /*
    Property ConnTag

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString ConnTag() const; //Returns the value of ConnTag
    inline void SetConnTag(const QString& value); //Sets the value of the ConnTag property

    /*
    Property ConnectionState

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int ConnectionState() const; //Returns the value of ConnectionState
    inline void SetConnectionState(int value); //Sets the value of the ConnectionState property

    /*
    Property ControlClasses

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString ControlClasses() const; //Returns the value of ControlClasses
    inline void SetControlClasses(const QString& value); //Sets the value of the ControlClasses property

    /*
    Property ElapsedTime

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int ElapsedTime() const; //Returns the value of ElapsedTime
    inline void SetElapsedTime(int value); //Sets the value of the ElapsedTime property

    /*
    Property Error

    For more information, see help context 12 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int Error() const; //Returns the value of Error
    inline void SetError(int value); //Sets the value of the Error property

    /*
    Property ErrorName

    For more information, see help context 13 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString ErrorName() const; //Returns the value of ErrorName
    inline void SetErrorName(const QString& value); //Sets the value of the ErrorName property

    /*
    Property ErrorTrap

    For more information, see help context 29 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline bool ErrorTrap() const; //Returns the value of ErrorTrap
    inline void SetErrorTrap(bool value); //Sets the value of the ErrorTrap property

    /*
    Property ExecFlag

    For more information, see help context 28 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int ExecFlag() const; //Returns the value of ExecFlag
    inline void SetExecFlag(int value); //Sets the value of the ExecFlag property

    /*
    Property Form

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString Form() const; //Returns the value of Form
    inline void SetForm(const QString& value); //Sets the value of the Form property

    /*
    Property FormName

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString FormName() const; //Returns the value of FormName
    inline void SetFormName(const QString& value); //Sets the value of the FormName property

    /*
    Property INTCode

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString INTCode() const; //Returns the value of INTCode
    inline void SetINTCode(const QString& value); //Sets the value of the INTCode property

    /*
    Property Interval

    For more information, see help context 11 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int Interval() const; //Returns the value of Interval
    inline void SetInterval(int value); //Sets the value of the Interval property

    /*
    Property KeepAliveInterval

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int KeepAliveInterval() const; //Returns the value of KeepAliveInterval
    inline void SetKeepAliveInterval(int value); //Sets the value of the KeepAliveInterval property

    /*
    Property KeepAliveTimeout

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int KeepAliveTimeout() const; //Returns the value of KeepAliveTimeout
    inline void SetKeepAliveTimeout(int value); //Sets the value of the KeepAliveTimeout property

    /*
    Property LoadOption

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int LoadOption() const; //Returns the value of LoadOption
    inline void SetLoadOption(int value); //Sets the value of the LoadOption property

    /*
    Property LogMask

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int LogMask() const; //Returns the value of LogMask
    inline void SetLogMask(int value); //Sets the value of the LogMask property

    /*
    Property MCode

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString MCode() const; //Returns the value of MCode
    inline void SetMCode(const QString& value); //Sets the value of the MCode property

    /*
    Property MServer

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString MServer() const; //Returns the value of MServer
    inline void SetMServer(const QString& value); //Sets the value of the MServer property

    /*
    Property MsgText

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString MsgText() const; //Returns the value of MsgText
    inline void SetMsgText(const QString& value); //Sets the value of the MsgText property

    /*
    Property NameSpace

    For more information, see help context 26 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString NameSpace() const; //Returns the value of NameSpace
    inline void SetNameSpace(const QString& value); //Sets the value of the NameSpace property

    /*
    Property P0

    For more information, see help context 14 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P0() const; //Returns the value of P0
    inline void SetP0(const QVariant& value); //Sets the value of the P0 property

    /*
    Property P1

    For more information, see help context 15 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P1() const; //Returns the value of P1
    inline void SetP1(const QVariant& value); //Sets the value of the P1 property

    /*
    Property P2

    For more information, see help context 16 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P2() const; //Returns the value of P2
    inline void SetP2(const QVariant& value); //Sets the value of the P2 property

    /*
    Property P3

    For more information, see help context 17 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P3() const; //Returns the value of P3
    inline void SetP3(const QVariant& value); //Sets the value of the P3 property

    /*
    Property P4

    For more information, see help context 18 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P4() const; //Returns the value of P4
    inline void SetP4(const QVariant& value); //Sets the value of the P4 property

    /*
    Property P5

    For more information, see help context 19 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P5() const; //Returns the value of P5
    inline void SetP5(const QVariant& value); //Sets the value of the P5 property

    /*
    Property P6

    For more information, see help context 20 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P6() const; //Returns the value of P6
    inline void SetP6(const QVariant& value); //Sets the value of the P6 property

    /*
    Property P7

    For more information, see help context 21 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P7() const; //Returns the value of P7
    inline void SetP7(const QVariant& value); //Sets the value of the P7 property

    /*
    Property P8

    For more information, see help context 22 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P8() const; //Returns the value of P8
    inline void SetP8(const QVariant& value); //Sets the value of the P8 property

    /*
    Property P9

    For more information, see help context 23 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant P9() const; //Returns the value of P9
    inline void SetP9(const QVariant& value); //Sets the value of the P9 property

    /*
    Property PDELIM

    For more information, see help context 9 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant PDELIM() const; //Returns the value of PDELIM
    inline void SetPDELIM(const QVariant& value); //Sets the value of the PDELIM property

    /*
    Property PLIST

    For more information, see help context 10 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant PLIST() const; //Returns the value of PLIST
    inline void SetPLIST(const QVariant& value); //Sets the value of the PLIST property

    /*
    Property Prefix

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString Prefix() const; //Returns the value of Prefix
    inline void SetPrefix(const QString& value); //Sets the value of the Prefix property

    /*
    Property PromptInterval

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int PromptInterval() const; //Returns the value of PromptInterval
    inline void SetPromptInterval(int value); //Sets the value of the PromptInterval property

    /*
    Property RoutineName

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString RoutineName() const; //Returns the value of RoutineName
    inline void SetRoutineName(const QString& value); //Sets the value of the RoutineName property

    /*
    Property RoutineSource

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString RoutineSource() const; //Returns the value of RoutineSource
    inline void SetRoutineSource(const QString& value); //Sets the value of the RoutineSource property

    /*
    Property Server

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString Server() const; //Returns the value of Server
    inline void SetServer(const QString& value); //Sets the value of the Server property

    /*
    Property TimeOut

    For more information, see help context 27 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int TimeOut() const; //Returns the value of TimeOut
    inline void SetTimeOut(int value); //Sets the value of the TimeOut property

    /*
    Property VALUE

    For more information, see help context 24 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant VALUE() const; //Returns the value of VALUE
    inline void SetVALUE(const QVariant& value); //Sets the value of the VALUE property

    /*
    Property _VALUE

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QVariant _VALUE() const; //Returns the value of _VALUE
    inline void set_VALUE(const QVariant& value); //Sets the value of the _VALUE property

    /*
    Method AboutBox

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline void AboutBox();

    /*
    Method Connect

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int Connect(const QString& ConnectionString);

    /*
    Method Connect

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline int Connect(const QString& ConnectionString, const QVariant& Tag);

    /*
    Method DeleteConnection

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline void DeleteConnection();

    /*
    Method Execute

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline void Execute(const QString& Code);

    /*
    Method GetConnStr

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline QString GetConnStr(const QString& inConnStr);

    /*
    Method LoadGblFromFile

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline bool LoadGblFromFile(const QString& FileName);

    /*
    Method LoadRtnFromFile

    For more information, see help context 0 in c:\Program Files (x86)\Common Files\InterSystems\Cache\CDirectENU.chm.
    */
    inline bool LoadRtnFromFile(const QString& FileName, const QString& Format);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_VISM_NOINLINES
inline int _DVisM::BatchMode() const
{
    QVariant qax_result = property("BatchMode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetBatchMode(int value){ setProperty("BatchMode", QVariant(value)); }

inline QString _DVisM::Code() const
{
    QVariant qax_result = property("Code");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetCode(const QString& value){ setProperty("Code", QVariant(value)); }

inline QString _DVisM::ConnTag() const
{
    QVariant qax_result = property("ConnTag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetConnTag(const QString& value){ setProperty("ConnTag", QVariant(value)); }

inline int _DVisM::ConnectionState() const
{
    QVariant qax_result = property("ConnectionState");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetConnectionState(int value){ setProperty("ConnectionState", QVariant(value)); }

inline QString _DVisM::ControlClasses() const
{
    QVariant qax_result = property("ControlClasses");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetControlClasses(const QString& value){ setProperty("ControlClasses", QVariant(value)); }

inline int _DVisM::ElapsedTime() const
{
    QVariant qax_result = property("ElapsedTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetElapsedTime(int value){ setProperty("ElapsedTime", QVariant(value)); }

inline int _DVisM::Error() const
{
    QVariant qax_result = property("Error");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetError(int value){ setProperty("Error", QVariant(value)); }

inline QString _DVisM::ErrorName() const
{
    QVariant qax_result = property("ErrorName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetErrorName(const QString& value){ setProperty("ErrorName", QVariant(value)); }

inline bool _DVisM::ErrorTrap() const
{
    QVariant qax_result = property("ErrorTrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DVisM::SetErrorTrap(bool value){ setProperty("ErrorTrap", QVariant(value)); }

inline int _DVisM::ExecFlag() const
{
    QVariant qax_result = property("ExecFlag");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetExecFlag(int value){ setProperty("ExecFlag", QVariant(value)); }

inline QString _DVisM::Form() const
{
    QVariant qax_result = property("Form");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetForm(const QString& value){ setProperty("Form", QVariant(value)); }

inline QString _DVisM::FormName() const
{
    QVariant qax_result = property("FormName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetFormName(const QString& value){ setProperty("FormName", QVariant(value)); }

inline QString _DVisM::INTCode() const
{
    QVariant qax_result = property("INTCode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetINTCode(const QString& value){ setProperty("INTCode", QVariant(value)); }

inline int _DVisM::Interval() const
{
    QVariant qax_result = property("Interval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetInterval(int value){ setProperty("Interval", QVariant(value)); }

inline int _DVisM::KeepAliveInterval() const
{
    QVariant qax_result = property("KeepAliveInterval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetKeepAliveInterval(int value){ setProperty("KeepAliveInterval", QVariant(value)); }

inline int _DVisM::KeepAliveTimeout() const
{
    QVariant qax_result = property("KeepAliveTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetKeepAliveTimeout(int value){ setProperty("KeepAliveTimeout", QVariant(value)); }

inline int _DVisM::LoadOption() const
{
    QVariant qax_result = property("LoadOption");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetLoadOption(int value){ setProperty("LoadOption", QVariant(value)); }

inline int _DVisM::LogMask() const
{
    QVariant qax_result = property("LogMask");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetLogMask(int value){ setProperty("LogMask", QVariant(value)); }

inline QString _DVisM::MCode() const
{
    QVariant qax_result = property("MCode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetMCode(const QString& value){ setProperty("MCode", QVariant(value)); }

inline QString _DVisM::MServer() const
{
    QVariant qax_result = property("MServer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetMServer(const QString& value){ setProperty("MServer", QVariant(value)); }

inline QString _DVisM::MsgText() const
{
    QVariant qax_result = property("MsgText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetMsgText(const QString& value){ setProperty("MsgText", QVariant(value)); }

inline QString _DVisM::NameSpace() const
{
    QVariant qax_result = property("NameSpace");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetNameSpace(const QString& value){ setProperty("NameSpace", QVariant(value)); }

inline QVariant _DVisM::P0() const
{
    QVariant qax_result = property("P0");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP0(const QVariant& value){ setProperty("P0", QVariant(value)); }

inline QVariant _DVisM::P1() const
{
    QVariant qax_result = property("P1");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP1(const QVariant& value){ setProperty("P1", QVariant(value)); }

inline QVariant _DVisM::P2() const
{
    QVariant qax_result = property("P2");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP2(const QVariant& value){ setProperty("P2", QVariant(value)); }

inline QVariant _DVisM::P3() const
{
    QVariant qax_result = property("P3");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP3(const QVariant& value){ setProperty("P3", QVariant(value)); }

inline QVariant _DVisM::P4() const
{
    QVariant qax_result = property("P4");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP4(const QVariant& value){ setProperty("P4", QVariant(value)); }

inline QVariant _DVisM::P5() const
{
    QVariant qax_result = property("P5");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP5(const QVariant& value){ setProperty("P5", QVariant(value)); }

inline QVariant _DVisM::P6() const
{
    QVariant qax_result = property("P6");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP6(const QVariant& value){ setProperty("P6", QVariant(value)); }

inline QVariant _DVisM::P7() const
{
    QVariant qax_result = property("P7");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP7(const QVariant& value){ setProperty("P7", QVariant(value)); }

inline QVariant _DVisM::P8() const
{
    QVariant qax_result = property("P8");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP8(const QVariant& value){ setProperty("P8", QVariant(value)); }

inline QVariant _DVisM::P9() const
{
    QVariant qax_result = property("P9");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetP9(const QVariant& value){ setProperty("P9", QVariant(value)); }

inline QVariant _DVisM::PDELIM() const
{
    QVariant qax_result = property("PDELIM");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetPDELIM(const QVariant& value){ setProperty("PDELIM", QVariant(value)); }

inline QVariant _DVisM::PLIST() const
{
    QVariant qax_result = property("PLIST");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetPLIST(const QVariant& value){ setProperty("PLIST", QVariant(value)); }

inline QString _DVisM::Prefix() const
{
    QVariant qax_result = property("Prefix");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetPrefix(const QString& value){ setProperty("Prefix", QVariant(value)); }

inline int _DVisM::PromptInterval() const
{
    QVariant qax_result = property("PromptInterval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetPromptInterval(int value){ setProperty("PromptInterval", QVariant(value)); }

inline QString _DVisM::RoutineName() const
{
    QVariant qax_result = property("RoutineName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetRoutineName(const QString& value){ setProperty("RoutineName", QVariant(value)); }

inline QString _DVisM::RoutineSource() const
{
    QVariant qax_result = property("RoutineSource");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetRoutineSource(const QString& value){ setProperty("RoutineSource", QVariant(value)); }

inline QString _DVisM::Server() const
{
    QVariant qax_result = property("Server");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DVisM::SetServer(const QString& value){ setProperty("Server", QVariant(value)); }

inline int _DVisM::TimeOut() const
{
    QVariant qax_result = property("TimeOut");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DVisM::SetTimeOut(int value){ setProperty("TimeOut", QVariant(value)); }

inline QVariant _DVisM::VALUE() const
{
    QVariant qax_result = property("VALUE");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::SetVALUE(const QVariant& value){ setProperty("VALUE", QVariant(value)); }

inline QVariant _DVisM::_VALUE() const
{
    QVariant qax_result = property("_VALUE");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void _DVisM::set_VALUE(const QVariant& value){ setProperty("_VALUE", QVariant(value)); }

inline void _DVisM::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int _DVisM::Connect(const QString& ConnectionString)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ConnectionString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int _DVisM::Connect(const QString& ConnectionString, const QVariant& Tag)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ConnectionString, (void*)&Tag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void _DVisM::DeleteConnection()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void _DVisM::Execute(const QString& Code)
{
    void *_a[] = {0, (void*)&Code};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline QString _DVisM::GetConnStr(const QString& inConnStr)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&inConnStr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool _DVisM::LoadGblFromFile(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool _DVisM::LoadRtnFromFile(const QString& FileName, const QString& Format)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Format};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}


inline int VisM::BatchMode() const
{
    QVariant qax_result = property("BatchMode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetBatchMode(int value){ setProperty("BatchMode", QVariant(value)); }

inline QString VisM::Code() const
{
    QVariant qax_result = property("Code");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetCode(const QString& value){ setProperty("Code", QVariant(value)); }

inline QString VisM::ConnTag() const
{
    QVariant qax_result = property("ConnTag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetConnTag(const QString& value){ setProperty("ConnTag", QVariant(value)); }

inline int VisM::ConnectionState() const
{
    QVariant qax_result = property("ConnectionState");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetConnectionState(int value){ setProperty("ConnectionState", QVariant(value)); }

inline QString VisM::ControlClasses() const
{
    QVariant qax_result = property("ControlClasses");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetControlClasses(const QString& value){ setProperty("ControlClasses", QVariant(value)); }

inline int VisM::ElapsedTime() const
{
    QVariant qax_result = property("ElapsedTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetElapsedTime(int value){ setProperty("ElapsedTime", QVariant(value)); }

inline int VisM::Error() const
{
    QVariant qax_result = property("Error");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetError(int value){ setProperty("Error", QVariant(value)); }

inline QString VisM::ErrorName() const
{
    QVariant qax_result = property("ErrorName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetErrorName(const QString& value){ setProperty("ErrorName", QVariant(value)); }

inline bool VisM::ErrorTrap() const
{
    QVariant qax_result = property("ErrorTrap");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void VisM::SetErrorTrap(bool value){ setProperty("ErrorTrap", QVariant(value)); }

inline int VisM::ExecFlag() const
{
    QVariant qax_result = property("ExecFlag");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetExecFlag(int value){ setProperty("ExecFlag", QVariant(value)); }

inline QString VisM::Form() const
{
    QVariant qax_result = property("Form");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetForm(const QString& value){ setProperty("Form", QVariant(value)); }

inline QString VisM::FormName() const
{
    QVariant qax_result = property("FormName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetFormName(const QString& value){ setProperty("FormName", QVariant(value)); }

inline QString VisM::INTCode() const
{
    QVariant qax_result = property("INTCode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetINTCode(const QString& value){ setProperty("INTCode", QVariant(value)); }

inline int VisM::Interval() const
{
    QVariant qax_result = property("Interval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetInterval(int value){ setProperty("Interval", QVariant(value)); }

inline int VisM::KeepAliveInterval() const
{
    QVariant qax_result = property("KeepAliveInterval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetKeepAliveInterval(int value){ setProperty("KeepAliveInterval", QVariant(value)); }

inline int VisM::KeepAliveTimeout() const
{
    QVariant qax_result = property("KeepAliveTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetKeepAliveTimeout(int value){ setProperty("KeepAliveTimeout", QVariant(value)); }

inline int VisM::LoadOption() const
{
    QVariant qax_result = property("LoadOption");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetLoadOption(int value){ setProperty("LoadOption", QVariant(value)); }

inline int VisM::LogMask() const
{
    QVariant qax_result = property("LogMask");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetLogMask(int value){ setProperty("LogMask", QVariant(value)); }

inline QString VisM::MCode() const
{
    QVariant qax_result = property("MCode");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetMCode(const QString& value){ setProperty("MCode", QVariant(value)); }

inline QString VisM::MServer() const
{
    QVariant qax_result = property("MServer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetMServer(const QString& value){ setProperty("MServer", QVariant(value)); }

inline QString VisM::MsgText() const
{
    QVariant qax_result = property("MsgText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetMsgText(const QString& value){ setProperty("MsgText", QVariant(value)); }

inline QString VisM::NameSpace() const
{
    QVariant qax_result = property("NameSpace");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetNameSpace(const QString& value){ setProperty("NameSpace", QVariant(value)); }

inline QVariant VisM::P0() const
{
    QVariant qax_result = property("P0");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP0(const QVariant& value){ setProperty("P0", QVariant(value)); }

inline QVariant VisM::P1() const
{
    QVariant qax_result = property("P1");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP1(const QVariant& value){ setProperty("P1", QVariant(value)); }

inline QVariant VisM::P2() const
{
    QVariant qax_result = property("P2");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP2(const QVariant& value){ setProperty("P2", QVariant(value)); }

inline QVariant VisM::P3() const
{
    QVariant qax_result = property("P3");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP3(const QVariant& value){ setProperty("P3", QVariant(value)); }

inline QVariant VisM::P4() const
{
    QVariant qax_result = property("P4");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP4(const QVariant& value){ setProperty("P4", QVariant(value)); }

inline QVariant VisM::P5() const
{
    QVariant qax_result = property("P5");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP5(const QVariant& value){ setProperty("P5", QVariant(value)); }

inline QVariant VisM::P6() const
{
    QVariant qax_result = property("P6");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP6(const QVariant& value){ setProperty("P6", QVariant(value)); }

inline QVariant VisM::P7() const
{
    QVariant qax_result = property("P7");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP7(const QVariant& value){ setProperty("P7", QVariant(value)); }

inline QVariant VisM::P8() const
{
    QVariant qax_result = property("P8");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP8(const QVariant& value){ setProperty("P8", QVariant(value)); }

inline QVariant VisM::P9() const
{
    QVariant qax_result = property("P9");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetP9(const QVariant& value){ setProperty("P9", QVariant(value)); }

inline QVariant VisM::PDELIM() const
{
    QVariant qax_result = property("PDELIM");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetPDELIM(const QVariant& value){ setProperty("PDELIM", QVariant(value)); }

inline QVariant VisM::PLIST() const
{
    QVariant qax_result = property("PLIST");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetPLIST(const QVariant& value){ setProperty("PLIST", QVariant(value)); }

inline QString VisM::Prefix() const
{
    QVariant qax_result = property("Prefix");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetPrefix(const QString& value){ setProperty("Prefix", QVariant(value)); }

inline int VisM::PromptInterval() const
{
    QVariant qax_result = property("PromptInterval");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetPromptInterval(int value){ setProperty("PromptInterval", QVariant(value)); }

inline QString VisM::RoutineName() const
{
    QVariant qax_result = property("RoutineName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetRoutineName(const QString& value){ setProperty("RoutineName", QVariant(value)); }

inline QString VisM::RoutineSource() const
{
    QVariant qax_result = property("RoutineSource");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetRoutineSource(const QString& value){ setProperty("RoutineSource", QVariant(value)); }

inline QString VisM::Server() const
{
    QVariant qax_result = property("Server");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void VisM::SetServer(const QString& value){ setProperty("Server", QVariant(value)); }

inline int VisM::TimeOut() const
{
    QVariant qax_result = property("TimeOut");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void VisM::SetTimeOut(int value){ setProperty("TimeOut", QVariant(value)); }

inline QVariant VisM::VALUE() const
{
    QVariant qax_result = property("VALUE");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::SetVALUE(const QVariant& value){ setProperty("VALUE", QVariant(value)); }

inline QVariant VisM::_VALUE() const
{
    QVariant qax_result = property("_VALUE");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void VisM::set_VALUE(const QVariant& value){ setProperty("_VALUE", QVariant(value)); }

inline void VisM::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline int VisM::Connect(const QString& ConnectionString)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ConnectionString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline int VisM::Connect(const QString& ConnectionString, const QVariant& Tag)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ConnectionString, (void*)&Tag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void VisM::DeleteConnection()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void VisM::Execute(const QString& Code)
{
    void *_a[] = {0, (void*)&Code};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline QString VisM::GetConnStr(const QString& inConnStr)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&inConnStr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool VisM::LoadGblFromFile(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool VisM::LoadRtnFromFile(const QString& FileName, const QString& Format)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Format};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<VISM::_DVisM, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<VISM::_DVisM*>(t)->VISM::_DVisM::~_DVisM();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) VISM::_DVisM;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const VISM::_DVisM*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<VISM::_DVisM*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<VISM::VisM, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<VISM::VisM*>(t)->VISM::VisM::~VisM();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) VISM::VisM;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const VISM::VisM*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<VISM::VisM*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

